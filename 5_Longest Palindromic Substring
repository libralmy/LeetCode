    /**
     * Solution1: ->|<-
     * for(i=length ;i--) control the size of substring, => for(start =0, start+i<length, start++), isvalidPalindorme()
     * Solution2: <-|->
     * for(i) i as the mid, use helper(s, left, right) to check the wing, two condition: odd, even**/
    public static String longestPalindrome(String s) {
        if(s.length() <= 1) return s;
        String longest = s.substring(0,1);

        for(int i = 0; i<s.length(); i++){
            String temp = helper(s, i, i);
            longest = temp.length() > longest.length()? temp: longest;
            temp = helper(s, i, i+1);
            longest = temp.length() > longest.length()? temp: longest;
        }

        return longest;
    }
    public static String helper(String s, int left, int right){
        while(left>=0 && right <s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        return s.substring(left+1, right); //undo the last while loop
    }
