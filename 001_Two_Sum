/********S1***********/
/**use two pointer for the sorted array
 * Arrays.copyof(arr, arr.length)
 * Arrays.sorted(arr2)
 * get the two value 
 * check them in the original array**/
 
 
 /********S2***********/
/**use HashMap<> to check map.get(arr(i))
 * Arrays.copyof(arr, arr.length)
 * Arrays.sorted(arr2)
 * get the two value 
 * check them in the original array**/
public static int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        Map<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i< nums.length ; i++){
            if(map.containsKey(target - nums[i])){

                result[0] = map.get(target-nums[i]);
                result[1] = i;
                return result;
            }
            map.put(nums[i],i);
        }

        return result;
    } 
public int[] twoSum(int[] nums, int target) {
            if(nums.length == 0){
                return null;
            }
            
            int left = 0;
            int right = nums.length - 1;
            int[] result = new int[2];
            int a = 0, b = 0;
            
            
            int[] nums2 = Arrays.copyOf(nums, nums.length);
            Arrays.sort(nums2);
            while(left <right){
                int total = nums2[left] + nums2[right];
                if(total == target){a = nums2[left]; b = nums2[right]; break;}
                if(total > target){
                    right--;
                }else{
                    left++;
                }
            }
            
        for(int k = 0;k<nums.length;k++){
            if(nums[k]==a){
                result[0]=k;
                break;
            }
        }

        if(a!=b){
            for(int k = 0;k<nums.length;k++){
                if(nums[k]==b){
                    result[1]=k;
                    break;
                }
            }
        }else{
            for(int k =0;k<nums.length;k++){
                if(nums[k]==b && k!=result[0]){
                    result[1]=k;
                    break;
                }
            }

        }
            return result;
  }
