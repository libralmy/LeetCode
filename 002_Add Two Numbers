/**
 * @param l1 a given ListNode
 * @param l2 a given ListNode
 * @return add each node of l1 and l2, from left to right
 * 
 * initial a new Node for result and creat a dummyhead(0)
 * three pointer which points to l1, l2 and dummyhead
 * addup all digits when any of pointers l1 and l2 is not null, or carry not null
 * sum = a + b + carry!!!
 * reminder = sum%10
 * carry = sum/10
 * setup resultnode value as reminder
 * move pointer to next
 * conner case: l1 or l2 might not have same size 
 *              
 * 
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {

    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyhead = new ListNode(0);
        ListNode a = l1, b = l2, result = dummyhead;
        int reminder = 0, carry = 0, sum = 0;
        
        while(a != null || b != null || carry != 0){
            sum = (a == null? 0 : a.val) + (b == null? 0 : b.val) + carry;
            reminder = sum % 10;
            carry = sum/10;
            result.next = new ListNode(reminder);
            result = result.next;
            
            a = (a != null? a.next : null);
            b = (b != null? b.next : null);
        }
        return dummyhead.next;

    }


}
