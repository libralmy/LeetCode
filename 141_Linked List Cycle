 /**
S1: reverse listNode, if the last one is == head, then it has cycle (this is for head = tail)
S2: two pointer, fast = fast.next.next; slow = slow.next; if(slow == fast)return true (this is for inner cycly)****/
 
 
    public static boolean hasCycle(ListNode head) {
        if(head == null || head.next == null){return false;}
        return head.val == reverseListNode(head).val;

    }

    public static ListNode reverseListNode(ListNode head){
        ListNode prev = null;
        while(head != null){
            ListNode temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        return prev;
    }
    /*
public boolean hasCycle(ListNode head) {
  ListNode slow = head, fast = head;
  
  while (fast != null && fast.next != null) {
    slow = slow.next;
    fast = fast.next.next;
    
    if (slow == fast) 
        return true;
  }
  
  return false;
}
*/
