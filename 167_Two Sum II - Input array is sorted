/**
DS : Map<nums[i], i>
AL : for(numbers) => map.containsKey(target - nums[i])
N : cuz first round of iteration will reach the end almost, so result[1] = i;
    it required output index, so i should +1;
**/
/**S2
DS : none
AL : two pointer, cuz it is sorted array
N : it needs output index, so i should +1;
**/
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        int left = 0, right = numbers.length -1;
        
        while(left < right){
            int total = numbers[left] + numbers[right];
            if(total == target){ result[0] = left +1; result[1] = right +1; break;}
            if(total > target){ 
                right--;
            }else{
                left++;
            }
        }
        return result;
}


public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0 ; i<numbers.length ; i++ ){
            if(map.containsKey(target - numbers[i])){
                result[0] = map.get(target - numbers[i])+1;
                result[1] = i+1;
                return result;
            }
            map.put(numbers[i], i);
        }
        return result;
        
    }
}
