    /** three sum -> two sum + for loop "skip same result!!!!"
     * SORT array first, then could use two pointers
     * for() get num[i], avoid the same triplet
     * twoSum function start with i+1, end with len -1
     * in twoSum(): 1)result.add(Arrays.asList(i, s, e))
     *              2)do{start++;}while(start<end && num[start] == num[start++]) for skip same result***/
    public static List<List<Integer>> threeSum(int[] num) {

        List<List<Integer>> result = new ArrayList<>();
        if(num.length <= 2){ return result;}
        Arrays.sort(num);

        for(int i=0 ; i< num.length; i++){
            if(i>0 && num[i] == num[i-1]) continue;
            twoSum(result, num, i+1, num.length-1, 0-num[i]);

        }
        return result;
    }

    public static void twoSum(List<List<Integer>> result,int[] num, int start, int end, int target){

        while(start < end){
            int total = num[start] + num[end];
            if(target == total){
                result.add(Arrays.asList(num[start], num[end], -target));
                do{end--;}while(start < end && num[end] == num[end + 1]);
                do{start++;}while(start < end && num[start] == num[start - 1]);
            }else if(target > total){
                start++;
            }else{
                end--;
            }
        }
    }
