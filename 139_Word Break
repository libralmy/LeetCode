
    /********set up a dp array boolean[s.length()+1] , check the dp[slow] == true, it is the break**********/
/*****S1 leetcode => slow = fast -1 => last word c<-o<-d<-e****************/

O(n/2) if break is in the middle and dict.word.length < s.length()
public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        
        boolean[] dp = new boolean[s.length()+1];
        dp[0] = true;

        for(int fast = 1; fast <= s.length(); fast++){
            for(int slow = fast-1; slow >= 0; slow--){// backward
                if(dp[slow] && wordDict.contains(s.substring(j,fast))){
                    dp[fast]=true;
                    break;
                }
            }
        }

        return dp[s.length()]; 
        
    }
     /*   O(n)
     public boolean wordBreak(String s, Set<String> wordDict) {
         
         boolean[] dp = new boolean[s.length()+1];
         dp[0] =true;
         for(int fast = 1; fast <= s.length(); fast++){//substring(include, exclude)
             for(int slow = 0; slow < fast ; slow++){
                 if(dp[slow] && wordDict.contains(s.substring(slow, fast))){
                     dp[fast] = true;
                     break;
                 }
             }
         }
         return dp[s.length()];

    }*/
   
}
