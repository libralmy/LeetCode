    /**
     * set up two pointer fast-> fast.next.next, slow -> slow.next
     * if it is odd slow need to go next, then reverse slow
     * while(slow!= null && val = val)iterate slow and head in same, compare slow.val and head.val,
     * after the iteration, if slow ==null, right parts are same as left**/
    public static boolean isPalindrome(ListNode head) {
        ListNode fast = head, slow = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        if(fast != null){ slow = slow.next; }

        while(slow != null && slow.val == head.val){

            slow = slow.next;
            head = head.next;
        }
        return slow == null;
    }

    public static ListNode reverseLinkedlist(ListNode head){
        ListNode newHead = null;
        while(head != null){
            ListNode temp = head.next;
            head.next = newHead;
            newHead = head;
            head = temp;
        }
        return newHead;
    }
